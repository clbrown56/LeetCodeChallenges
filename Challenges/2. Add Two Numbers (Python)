"""
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

:type l1: ListNode
:type l2: ListNode
:rtype: ListNode
"""

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution(object):

    # getVal finds the integer value of a given linked list.
    def getVal(self, link, val, mult):
        if (link.val != None): # Only used in base case
            val += link.val * mult 
            if (link.next != None):
                return self.getVal(link.next, val, mult*10) # Recursive step
        return val 

    # findVal translates the final integer value into linked list format
    def findVal(self, sFinal, i):
        if (i == len(sFinal)):
            return None
        
        link = ListNode(sFinal[i], self.findVal(sFinal, i+1))
        return link

    # Main Method
    def addTwoNumbers(self, l1, l2):
        #Find integer value of both provided link lists
        v1 = self.getVal(l1, 0, 1)
        v2 = self.getVal(l2, 0, 1)

        #Find sum value
        final = v1 + v2

        #Reverse list (due to formatting of these linked list)
        sFinal = str(final)[::-1]

        
        return self.findVal(sFinal, 0)
